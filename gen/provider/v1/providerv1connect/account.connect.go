// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: provider/v1/account.proto

package providerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/getumbeluzi/umbeluzi-server/gen/provider/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "provider.v1.AccountService"
)

// AccountServiceClient is a client for the provider.v1.AccountService service.
type AccountServiceClient interface {
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error)
	ValidateAccount(context.Context, *connect_go.Request[v1.ValidateAccountRequest]) (*connect_go.Response[v1.ValidateAccountResponse], error)
}

// NewAccountServiceClient constructs a client for the provider.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		getAccount: connect_go.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+"/provider.v1.AccountService/GetAccount",
			opts...,
		),
		validateAccount: connect_go.NewClient[v1.ValidateAccountRequest, v1.ValidateAccountResponse](
			httpClient,
			baseURL+"/provider.v1.AccountService/ValidateAccount",
			opts...,
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	getAccount      *connect_go.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	validateAccount *connect_go.Client[v1.ValidateAccountRequest, v1.ValidateAccountResponse]
}

// GetAccount calls provider.v1.AccountService.GetAccount.
func (c *accountServiceClient) GetAccount(ctx context.Context, req *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// ValidateAccount calls provider.v1.AccountService.ValidateAccount.
func (c *accountServiceClient) ValidateAccount(ctx context.Context, req *connect_go.Request[v1.ValidateAccountRequest]) (*connect_go.Response[v1.ValidateAccountResponse], error) {
	return c.validateAccount.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the provider.v1.AccountService service.
type AccountServiceHandler interface {
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error)
	ValidateAccount(context.Context, *connect_go.Request[v1.ValidateAccountRequest]) (*connect_go.Response[v1.ValidateAccountResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/provider.v1.AccountService/GetAccount", connect_go.NewUnaryHandler(
		"/provider.v1.AccountService/GetAccount",
		svc.GetAccount,
		opts...,
	))
	mux.Handle("/provider.v1.AccountService/ValidateAccount", connect_go.NewUnaryHandler(
		"/provider.v1.AccountService/ValidateAccount",
		svc.ValidateAccount,
		opts...,
	))
	return "/provider.v1.AccountService/", mux
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("provider.v1.AccountService.GetAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) ValidateAccount(context.Context, *connect_go.Request[v1.ValidateAccountRequest]) (*connect_go.Response[v1.ValidateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("provider.v1.AccountService.ValidateAccount is not implemented"))
}
