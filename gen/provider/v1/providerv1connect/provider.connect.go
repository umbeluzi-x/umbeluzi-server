// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: provider/v1/provider.proto

package providerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/getumbeluzi/umbeluzi-server/gen/provider/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "provider.v1.ProviderService"
)

// ProviderServiceClient is a client for the provider.v1.ProviderService service.
type ProviderServiceClient interface {
	GetPayment(context.Context, *connect_go.Request[v1.GetPaymentRequest]) (*connect_go.Response[v1.GetPaymentResponse], error)
	CreatePayment(context.Context, *connect_go.Request[v1.CreatePaymentRequest]) (*connect_go.Response[v1.CreatePaymentResponse], error)
}

// NewProviderServiceClient constructs a client for the provider.v1.ProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerServiceClient{
		getPayment: connect_go.NewClient[v1.GetPaymentRequest, v1.GetPaymentResponse](
			httpClient,
			baseURL+"/provider.v1.ProviderService/GetPayment",
			opts...,
		),
		createPayment: connect_go.NewClient[v1.CreatePaymentRequest, v1.CreatePaymentResponse](
			httpClient,
			baseURL+"/provider.v1.ProviderService/CreatePayment",
			opts...,
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	getPayment    *connect_go.Client[v1.GetPaymentRequest, v1.GetPaymentResponse]
	createPayment *connect_go.Client[v1.CreatePaymentRequest, v1.CreatePaymentResponse]
}

// GetPayment calls provider.v1.ProviderService.GetPayment.
func (c *providerServiceClient) GetPayment(ctx context.Context, req *connect_go.Request[v1.GetPaymentRequest]) (*connect_go.Response[v1.GetPaymentResponse], error) {
	return c.getPayment.CallUnary(ctx, req)
}

// CreatePayment calls provider.v1.ProviderService.CreatePayment.
func (c *providerServiceClient) CreatePayment(ctx context.Context, req *connect_go.Request[v1.CreatePaymentRequest]) (*connect_go.Response[v1.CreatePaymentResponse], error) {
	return c.createPayment.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the provider.v1.ProviderService service.
type ProviderServiceHandler interface {
	GetPayment(context.Context, *connect_go.Request[v1.GetPaymentRequest]) (*connect_go.Response[v1.GetPaymentResponse], error)
	CreatePayment(context.Context, *connect_go.Request[v1.CreatePaymentRequest]) (*connect_go.Response[v1.CreatePaymentResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/provider.v1.ProviderService/GetPayment", connect_go.NewUnaryHandler(
		"/provider.v1.ProviderService/GetPayment",
		svc.GetPayment,
		opts...,
	))
	mux.Handle("/provider.v1.ProviderService/CreatePayment", connect_go.NewUnaryHandler(
		"/provider.v1.ProviderService/CreatePayment",
		svc.CreatePayment,
		opts...,
	))
	return "/provider.v1.ProviderService/", mux
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) GetPayment(context.Context, *connect_go.Request[v1.GetPaymentRequest]) (*connect_go.Response[v1.GetPaymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("provider.v1.ProviderService.GetPayment is not implemented"))
}

func (UnimplementedProviderServiceHandler) CreatePayment(context.Context, *connect_go.Request[v1.CreatePaymentRequest]) (*connect_go.Response[v1.CreatePaymentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("provider.v1.ProviderService.CreatePayment is not implemented"))
}
